/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "unistd.h"
#include "screen.h"
#include "globals.h"
#include "core.h"
#include "sound.h"
#include "xparameters.h"
#include "pitiful.h"

#define INIT_DELAY 1000

int main()
{
	uint32_t delay_value = INIT_DELAY;
	pitiful_t thePit;
	//int64_t idle_count;
	// calls initializer functions, then runs game core
	init_platform();
	screen_init();
	screen_clear();

	pitiful_initialize(&thePit, XPAR_PITIFUL_0_BASEADDR);

	pitiful_interrupt_enable(&thePit);
	pitiful_set_delay(&thePit, delay_value);
	pitiful_counter_reload_enable(&thePit);
	pitiful_counter_enable(&thePit);
	xil_printf("int: %d reload: %d enable: %d delay: %d\r\n",pitiful_interrupt_enabled(&thePit),pitiful_counter_reloading(&thePit),pitiful_counter_enabled(&thePit),pitiful_get_delay(&thePit));
	sound_init();
	globals_init();
	core_init();
	core_draw_initial();//run_test();
	core_run();
	xil_printf("Inits completed.\r\n");
	while(1) {

//		xil_printf("\r\n%d",idle_count++);
	}
	cleanup_platform();

	return 0;
}
