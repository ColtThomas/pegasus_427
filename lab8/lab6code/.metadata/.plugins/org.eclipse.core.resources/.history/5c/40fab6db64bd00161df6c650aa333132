Skip to content
This repository
Search
Pull requests
Issues
Gist
 @cmthomas000
 Unwatch 2
  Star 0
 Fork 0 cmthomas000/pegasus_427 Private
 Code  Issues 0  Pull requests 0  Projects 0  Wiki  Pulse  Graphs  Settings
Branch: master Find file Copy pathpegasus_427/lab6/lab6code/hello_world_0/src/helloworld.c
f144388  on Nov 6
@cmthomas000 cmthomas000 commenting and stuff
2 contributors @cmthomas000 @DallonTG
RawBlameHistory
87 lines (74 sloc)  2.26 KB
/*
 * Copyright (c) 2009 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 */

#include <stdio.h>
#include "platform.h"
#include "unistd.h"
#include "screen.h"
#include "globals.h"
#include "core.h"
#include "sound.h"
#include<stdint.h>

#define CHAR_TO_INT '0'
#define CHAR_NUM_MAX '9'
#define CHAR_NUM_MIN '0'
#define CHAR_RETURN '\r'
#define CHAR_NEW_LINE '\n'
#define DELAY_MULTIPLY 10
#define times_ten(x) (x)*10
int main()
{
	//int64_t idle_count;
	// calls initializer functions, then runs game core
	init_platform();
	screen_init();
	sound_init();
	globals_init();
	screen_clear();
	core_init();
	core_draw_initial();
	core_run();

	// Initializations for UART communication
	char input;
	uint32_t delay_time = 0;

	// Disable input/output buffers
	setvbuf(stdout, NULL, _IONBF, NULL);
	setvbuf(stdin, NULL, _IONBF, NULL);

	while(1) {

		input = getchar(); // Get the user input char

		// We will only accept numbers and carriage return/new line as input
		if(input == CHAR_NEW_LINE || input == CHAR_RETURN) {

			// Hitting enter will acknowledge that a number was typed
			xil_printf("\r\n");
			xil_printf("Delay: %d\r\n",delay_time);
			globals_setDelayValue(delay_time); // Respective value set to PIT
			delay_time = 0;
		}
		else if(input <= CHAR_NUM_MAX && input >= CHAR_NUM_MIN) {

			// We append 'integers' together to make our delay value
			xil_printf("%c",input);
			uint32_t temp = input - CHAR_TO_INT;
			delay_time *= DELAY_MULTIPLY;
			delay_time += temp;
		}

	}
	cleanup_platform();

	return 0;
}
Contact GitHub API Training Shop Blog About
© 2016 GitHub, Inc. Terms Privacy Security Status Help
